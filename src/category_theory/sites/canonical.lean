/-
Copyright (c) 2020 Bhavik Mehta, E. W. Ayers. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta, E. W. Ayers
-/

import category_theory.sites.grothendieck
import category_theory.sites.pretopology
import category_theory.sites.sheaf
import category_theory.full_subcategory
import category_theory.types

universes v u
namespace category_theory

open category_theory category limits sieve classical

variables {C : Type u} [category.{v} C]

namespace sheaf
namespace grothendieck_topology

variables {P : C·µí·µñ ‚•§ Type v}
variables {X Y : C} {S : sieve X} {R : presieve X}
variables (J J‚ÇÇ : grothendieck_topology C)

lemma is_sheaf_for_bind (P : C·µí·µñ ‚•§ Type v) (U : sieve X)
  (B : Œ† ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, U f ‚Üí sieve Y)
  (hU : is_sheaf_for P U)
  (hB : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : U f), is_sheaf_for P (B hf))
  (hB' : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : U f) ‚¶ÉZ‚¶Ñ (g : Z ‚ü∂ Y), is_separated_for P ((B hf).pullback g)) :
  is_sheaf_for P (sieve.bind U B) :=
begin
  intros s hs,
  let y : Œ† ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : U f), family_of_elements P (B hf) :=
    Œª Y f hf Z g hg, s _ (presieve.bind_comp _ _ hg),
  have hy : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : U f), (y hf).consistent,
  { intros Y f H Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ comm,
    apply hs,
    apply reassoc_of comm },
  let t : family_of_elements P U,
  { intros Y f hf,
    apply (hB hf).amalgamate (y hf) (hy hf) },
  have ht : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : U f), is_amalgamation_for (y hf) (t f hf),
  { intros Y f hf,
    apply (hB hf).is_amalgamation_for _ },
  have hT : t.consistent,
  { rw is_sieve_consistent_iff,
    intros Z W f h hf,
    apply (hB (U.downward_closed hf h)).is_separated_for.ext,
    intros Y l hl,
    apply (hB' hf (l ‚â´ h)).ext,
    intros M m hm,
    have : (bind ‚áëU B) (m ‚â´ l ‚â´ h ‚â´ f),
    { have : bind U B _ := presieve.bind_comp f hf hm,
      simpa using this },
    transitivity s (m ‚â´ l ‚â´ h ‚â´ f) this,
    { have := ht (U.downward_closed hf h) _ ((B _).downward_closed hl m),
      rw [op_comp, functor_to_types.map_comp_apply] at this,
      rw this,
      change s _ _ = s _ _,
      simp },
    { have : s _ _ = _ := (ht hf _ hm).symm,
      simp only [assoc] at this,
      rw this,
      simp } },
  refine ‚ü®hU.amalgamate t hT, _, _‚ü©,
  { rintro Z _ ‚ü®Y, f, g, hg, hf, rfl‚ü©,
    rw [op_comp, functor_to_types.map_comp_apply, is_sheaf_for.valid_glue _ _ _ hg],
    apply ht hg _ hf },
  { intros y hy,
    apply hU.is_separated_for.ext,
    intros Y f hf,
    apply (hB hf).is_separated_for.ext,
    intros Z g hg,
    rw [‚Üêfunctor_to_types.map_comp_apply, ‚Üêop_comp, hy _ (presieve.bind_comp _ _ hg),
        hU.valid_glue _ _ hf, ht hf _ hg] }
end

lemma is_sheaf_for_trans (P : C·µí·µñ ‚•§ Type v) (R S : sieve X)
  (hR : is_sheaf_for P R)
  (hR' : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : S f), is_separated_for P (R.pullback f))
  (hS : Œ† ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : R f), is_sheaf_for P (S.pullback f)) :
  is_sheaf_for P S :=
begin
  have : (bind ‚áëR (Œª (Y : C) (f : Y ‚ü∂ X) (hf : R f), pullback f S) : presieve X) ‚â§ S,
  { rintros Z f ‚ü®W, f, g, hg, (hf : S _), rfl‚ü©,
    apply hf },
  apply is_sheaf_for_subsieve_aux P this,
  apply is_sheaf_for_bind _ _ _ hR hS,
  { intros Y f hf Z g,
    dsimp,
    rw ‚Üê pullback_comp,
    apply (hS (R.downward_closed hf _)).is_separated_for },
  { intros Y f hf,
    have : (sieve.pullback f (bind R (Œª T (k : T ‚ü∂ X) (hf : R k), pullback k S))) = R.pullback f,
    { ext Z g,
      split,
      { rintro ‚ü®W, k, l, hl, _, comm‚ü©,
        rw [mem_pullback, ‚Üê comm],
        simp [hl] },
      { intro a,
        refine ‚ü®Z, ùüô Z, _, a, _‚ü©,
        simp [hf] } },
    rw this,
    apply hR' hf },
end

/-- Construct the finest Grothendieck topology for which the given presheaf is a sheaf. -/
def finest_topology_single (P : C·µí·µñ ‚•§ Type v) : grothendieck_topology C :=
{ sieves := Œª X S, ‚àÄ Y (f : Y ‚ü∂ X), is_sheaf_for P (S.pullback f),
  top_mem' := Œª X Y f,
  begin
    rw sieve.pullback_top,
    exact is_sheaf_for_top_sieve P,
  end,
  pullback_stable' := Œª X Y S f hS Z g,
  begin
    rw ‚Üê pullback_comp,
    apply hS,
  end,
  transitive' := Œª X S hS R hR Z g,
  begin
    refine is_sheaf_for_trans P (pullback g S) _ (hS Z g) _ _,
    { intros Y f hf,
      rw ‚Üê pullback_comp,
      apply (hS _ _).is_separated_for },
    { intros Y f hf,
      have := hR hf _ (ùüô _),
      rw [pullback_id, pullback_comp] at this,
      apply this },
  end }

/-- Construct the finest Grothendieck topology for which the given presheaves are sheaves. -/
def finest_topology (Ps : set (C·µí·µñ ‚•§ Type v)) : grothendieck_topology C :=
Inf (finest_topology_single '' Ps)

lemma sheaf_for_finest_topology (Ps : set (C·µí·µñ ‚•§ Type v)) :
  P ‚àà Ps ‚Üí is_sheaf (finest_topology Ps) P :=
begin
  intros h X S hS,
  simpa using hS _ ‚ü®‚ü®_, _, ‚ü®_, h, rfl‚ü©, rfl‚ü©, rfl‚ü© _ (ùüô _),
end

lemma is_finest_topology (Ps : set (C·µí·µñ ‚•§ Type v)) (J : grothendieck_topology C)
  (hJ : ‚àÄ P ‚àà Ps, is_sheaf J P) : J ‚â§ finest_topology Ps :=
begin
  intros X S hS,
  rintro _ ‚ü®‚ü®_, _, ‚ü®P, hP, rfl‚ü©, rfl‚ü©, rfl‚ü©,
  intros Y f,
  exact hJ P hP (S.pullback f) (J.pullback_stable f hS),
end

def canonical_topology : grothendieck_topology C :=
finest_topology (set.range yoneda.obj)

-- def matching_family (P : C·µí·µñ ‚•§ Type v) (S : sieve X) : Type (max u v) :=
-- S.functor ‚ü∂ P

-- def amalgamation {P : C·µí·µñ ‚•§ Type v} {S : sieve X} (Œ≥ : matching_family P S) :=
-- {Œ± : yoneda.obj X ‚ü∂ P // S.functor_inclusion ‚â´ Œ± = Œ≥}

-- @[derive subsingleton]
-- def sheaf_condition_at (S : sieve X) (P : C·µí·µñ ‚•§ Type v) : Type (max u v) :=
-- Œ† (Œ≥ : matching_family P S), unique (amalgamation Œ≥)

-- def sheaf_condition_at_top (P : C·µí·µñ ‚•§ Type v) : sheaf_condition_at (‚ä§ : sieve X) P :=
-- Œª Œ≥,
-- begin
--   refine ‚ü®‚ü®‚ü®inv (‚ä§:sieve X).functor_inclusion ‚â´ Œ≥, _‚ü©‚ü©, _‚ü©,
--   { simp },
--   { rintro ‚ü®a, ha‚ü©,
--     apply subtype.ext,
--     simp [ha] }
-- end

-- @[derive subsingleton]
-- def sheaf_condition (P : C·µí·µñ ‚•§ Type v) : Type (max u v) :=
-- Œ† (X : C) (S ‚àà J X), sheaf_condition_at S P

-- def canonical_map (P : C·µí·µñ ‚•§ Type v) (S : sieve X) : (yoneda.obj X ‚ü∂ P) ‚Üí (S.functor ‚ü∂ P) :=
-- Œª f, S.functor_inclusion ‚â´ f

-- def sheaf_condition2 (P : C·µí·µñ ‚•§ Type v) : Prop :=
-- ‚àÄ X (S : sieve X), S ‚àà J X ‚Üí function.bijective (canonical_map P S)

-- -- noncomputable def sheaf_condition2_equiv (P : C·µí·µñ ‚•§ Type v) : sheaf_condition J P ‚âÉ sheaf_condition2 J P :=
-- -- { to_fun := Œª t X S hS,
-- --   begin
-- --     split,
-- --     { intros Œ±‚ÇÅ Œ±‚ÇÇ hŒ±,
-- --       exact subtype.ext_iff.1 (((t X S _ hS).2 ‚ü®Œ±‚ÇÅ, hŒ±‚ü©).trans ((t X S _ hS).2 ‚ü®Œ±‚ÇÇ, rfl‚ü©).symm) },
-- --     { intros Œ≥,
-- --       exact ‚ü®_, (t X S Œ≥ hS).1.1.2‚ü© }
-- --   end,
-- --   inv_fun := Œª t X S Œ≥ hS,
-- --   begin
-- --     specialize t X S hS,
-- --     rw function.bijective_iff_has_inverse at t,
-- --     choose t ht‚ÇÅ ht‚ÇÇ using t,
-- --     refine ‚ü®‚ü®‚ü®t Œ≥, ht‚ÇÇ Œ≥‚ü©‚ü©, Œª a, _‚ü©,
-- --     cases a with a ha,
-- --     apply subtype.ext,
-- --     dsimp,
-- --     rw [‚Üê ht‚ÇÅ a, ‚Üê ha],
-- --     refl,
-- --   end

-- -- }

-- def matching_family' (P : C·µí·µñ ‚•§ Type v) {c : C} (S : sieve c) :=
-- {x : Œ† {d : C} {f : d ‚ü∂ c}, S.arrows f ‚Üí P.obj (opposite.op d) //
--  ‚àÄ {d e : C} (f : d ‚ü∂ c) (g : e ‚ü∂ d) (h : S.arrows f), x (S.downward_closed h g) = P.map g.op (x h)}

-- def amalgamation' {P : C·µí·µñ ‚•§ Type v} {c : C} {S : sieve c} (Œ≥ : matching_family' P S) :=
-- {y : P.obj (opposite.op c) // ‚àÄ {d : C} (f : d ‚ü∂ c) (hf : S.arrows f), P.map f.op y = Œ≥.1 hf}

-- @[derive subsingleton]
-- def sheaf_condition' (P : C·µí·µñ ‚•§ Type v) : Type (max u v) :=
-- Œ† (c : C) (S : sieve c) (Œ≥ : matching_family' P S), S ‚àà J c ‚Üí unique (amalgamation' Œ≥)

-- def matching_family'_equiv_matching_family (P : C·µí·µñ ‚•§ Type v) :
--   matching_family' P S ‚âÉ matching_family P S :=
-- { to_fun := Œª x, ‚ü®Œª _ t, x.1 t.2, Œª c c' f, funext $ Œª t, x.2 _ _ t.2‚ü©,
--   inv_fun := Œª x, ‚ü®Œª d f hf, x.app _ ‚ü®f, hf‚ü©, Œª d d' f g h, congr_fun (x.2 g.op) ‚ü®f, h‚ü©‚ü©,
--   left_inv := Œª _, subtype.ext $ funext $ Œª _, funext $ Œª _, funext $ Œª _, rfl,
--   right_inv := Œª _, by { ext _ ‚ü®_, _‚ü©, refl } }

-- def amalgamation'_equiv_amalgamation (P : C·µí·µñ ‚•§ Type v) (x : matching_family' P S) :
--   amalgamation (matching_family'_equiv_matching_family P x) ‚âÉ (amalgamation' x) :=
-- { to_fun := Œª Œ≥,
--   { val := Œ≥.1.app _ (ùüô X),
--     property := Œª d f hf,
--     begin
--       have := congr_fun (Œ≥.1.naturality f.op) (ùüô _),
--       dsimp at this,
--       erw ‚Üê this,
--       rw comp_id,
--       have q := congr_arg (Œª t, nat_trans.app t (opposite.op d)) Œ≥.2,
--       dsimp at q,
--       have := congr_fun q ‚ü®f, hf‚ü©,
--       exact this,
--     end },
--   inv_fun := Œª Œ≥,
--   { val :=
--     { app := Œª c f, P.map f.op Œ≥.1,
--       naturality' := Œª c c' f, funext $ Œª g, functor_to_types.map_comp_apply P g.op f Œ≥.1 },
--     property :=
--     begin
--       ext c ‚ü®f, hf‚ü©,
--       apply Œ≥.2,
--     end },
--   left_inv :=
--   begin
--     rintro ‚ü®Œ≥‚ÇÅ, Œ≥‚ÇÇ‚ü©,
--     ext d f,
--     dsimp,
--     rw ‚Üê functor_to_types.naturality _ _ Œ≥‚ÇÅ f.op (ùüô X),
--     dsimp,
--     simp,
--   end,
--   right_inv :=
--   begin
--     intro Œ≥,
--     ext1,
--     apply functor_to_types.map_id_apply,
--   end }

-- def sheaf'_equiv_sheaf (P : C·µí·µñ ‚•§ Type v) :
--   sheaf_condition J P ‚âÖ sheaf_condition' J P :=
-- { hom :=
--   begin
--     intros h c S Œ≥ hS,
--     apply equiv.unique (amalgamation'_equiv_amalgamation _ _).symm,
--     apply h _ _ hS,
--   end,
--   inv :=
--   begin
--     intros h c S hS Œ≥,
--     haveI := h _ _ ((matching_family'_equiv_matching_family P).symm Œ≥) hS,
--     have := equiv.unique (amalgamation'_equiv_amalgamation P ((matching_family'_equiv_matching_family P).symm Œ≥)),
--     simpa using this,
--   end }

-- def finest_topology_sieves (P : C·µí·µñ ‚•§ Type v) : Œ† (X : C), set (sieve X) :=
-- Œª X S, ‚àÄ Y (f : Y ‚ü∂ X), nonempty (sheaf_condition_at (S.pullback f) P)

-- def aux_map {Z : C} (S : sieve X) (Œ± : Z ‚ü∂ Y) (f : Y ‚ü∂ X) :
--   (S.pullback (Œ± ‚â´ f)).functor ‚ü∂ (S.pullback f).functor :=
-- { app := Œª T z, ‚ü®z.1 ‚â´ Œ±, by simpa using z.2‚ü© }.

-- def finest_topology (F : C·µí·µñ ‚•§ Type v) : grothendieck_topology C :=
-- { sieves := finest_topology_sieves F,
--   top_mem' := Œª X Y f,
--   begin
--     rw pullback_top,
--     refine ‚ü®sheaf_condition_at_top _‚ü©,
--   end,
--   pullback_stable' := Œª X Y S f hS Z g,
--   begin
--     rw ‚Üê pullback_comp,
--     apply hS _,
--   end,
--   transitive' := Œª U S hS S' t,
--   begin
--     intros W f,
--     cases hS _ f with hfS,
--     refine ‚ü®Œª œÜ, _‚ü©,
--     let œà : (S.pullback f).functor ‚ü∂ F,
--     { refine ‚ü®_, _‚ü©,
--       { intros V Œ±,
--         have q := t Œ±.2 _ (ùüô _),
--         rw pullback_id at q,
--         apply (classical.choice q (aux_map S' Œ±.1 f ‚â´ œÜ)).1.1.1.app _ (ùüô _) },
--       { intros V‚ÇÅ V‚ÇÇ k,
--         sorry,
--         -- ext1 Œ±,
--         -- dsimp,
--         -- have q‚ÇÅ := t Œ±.2 _ (ùüô _),
--         -- rw pullback_id at q‚ÇÅ,
--         -- let z‚ÇÅ := (classical.choice q‚ÇÅ (aux_map S' Œ±.1 f ‚â´ œÜ)).1.1.1,
--         -- have := k.unop ‚â´ Œ±.1,
--         -- -- have q‚ÇÇ := t (S.downward_closed Œ±.2 k.unop) _ (ùüô _),
--         -- -- rw pullback_id at q‚ÇÇ,
--         -- have q‚ÇÇ : nonempty (sheaf_condition_at (pullback (((pullback f S).functor.map k Œ±).1 ‚â´ f) S') F),
--         --   dsimp [sieve.functor],
--         --   rw assoc,
--         --   have q‚ÇÇ := t (S.downward_closed Œ±.2 k.unop) _ (ùüô _),
--         --   rw pullback_id at q‚ÇÇ,
--         --   apply q‚ÇÇ,
--         -- let z‚ÇÇ := (classical.choice q‚ÇÇ (aux_map S' ((S.pullback f).functor.map k Œ±).1 f ‚â´ œÜ)).1.1.1,
--         -- change z‚ÇÇ.app V‚ÇÇ (ùüô _) = F.map k (z‚ÇÅ.app V‚ÇÅ (ùüô _)),
--         -- have := (classical.choice q‚ÇÇ (aux_map S' ((S.pullback f).functor.map k Œ±).1 f ‚â´ œÜ)).1.1.2,
--       }
--     },
--     refine ‚ü®‚ü®‚ü®(classical.choice (hS _ f) œà).1.1.1, _‚ü©‚ü©, _‚ü©,
--     have := (classical.choice (hS _ f) œà).1.1.2,
--   end
-- }

-- variables (C J)

-- structure Sheaf :=
-- (P : C·µí·µñ ‚•§ Type v)
-- (sheaf_cond : sheaf_condition J P)

-- instance : category (Sheaf C J) := induced_category.category Sheaf.P

end grothendieck_topology
end sheaf

end category_theory
