/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/

import category_theory.sites.grothendieck
import category_theory.sites.pretopology
import category_theory.full_subcategory
import category_theory.types
import category_theory.limits.types
import category_theory.limits.shapes.types
import tactic.equiv_rw

universes v u
namespace category_theory

open opposite category_theory category limits sieve classical

namespace presieve

variables {C : Type u} [category.{v} C]

variables {P : C·µí·µñ ‚•§ Type v}
variables {X Y : C} {S : sieve X} {R : presieve X}
variables (J J‚ÇÇ : grothendieck_topology C)

/--
A family of elements for a presheaf `P` given a collection of arrows `R` with fixed codomain `X`
consists of an element of `P Y` for every `f : Y ‚ü∂ X` in `R`.
A presheaf is a sheaf (resp, separated) if every *consistent* family of elements has exactly one
(resp, at most one) amalgamation.

This data is referred to as a `family` in [MM92], Chapter III, Section 4. It is also a concrete
version of the middle object in https://stacks.math.columbia.edu/tag/00VM which is more useful for
direct calculations. It is also used implicitly in Definition C2.1.2 in [Elephant].
-/
def family_of_elements (P : C·µí·µñ ‚•§ Type v) (R : presieve X) :=
Œ† ‚¶ÉY : C‚¶Ñ (f : Y ‚ü∂ X), R f ‚Üí P.obj (op Y)

instance : inhabited (family_of_elements P (‚ä• : presieve X)) := ‚ü®Œª Y f, false.elim‚ü©

/--
A family of elements for a presheaf on the presieve `R‚ÇÇ` can be restricted to a smaller presieve
`R‚ÇÅ`.
-/
def family_of_elements.restrict {R‚ÇÅ R‚ÇÇ : presieve X} (h : R‚ÇÅ ‚â§ R‚ÇÇ) :
  family_of_elements P R‚ÇÇ ‚Üí family_of_elements P R‚ÇÅ :=
Œª x Y f hf, x f (h _ hf)

/--
A family of elements for the arrow set `R` is consistent if for any `f‚ÇÅ : Y‚ÇÅ ‚ü∂ X` and `f‚ÇÇ : Y‚ÇÇ ‚ü∂ X`
in `R`, and any `g‚ÇÅ : Z ‚ü∂ Y‚ÇÅ` and `g‚ÇÇ : Z ‚ü∂ Y‚ÇÇ`, if the square `g‚ÇÅ ‚â´ f‚ÇÅ = g‚ÇÇ ‚â´ f‚ÇÇ` commutes then
the elements of `P Z` obtained by restricting the element of `P Y‚ÇÅ` along `g‚ÇÅ` and restricting
the element of `P Y‚ÇÇ` along `g‚ÇÇ` are the same.

In special cases, this condition can be simplified, see `is_pullback_consistent_iff` and
`is_sieve_consistent_iff`.

This is referred to as a "compatible family" in Definition C2.1.2 of [Elephant], and on nlab:
https://ncatlab.org/nlab/show/sheaf#GeneralDefinitionInComponents
-/
def family_of_elements.consistent (x : family_of_elements P R) : Prop :=
‚àÄ ‚¶ÉY‚ÇÅ Y‚ÇÇ Z‚¶Ñ (g‚ÇÅ : Z ‚ü∂ Y‚ÇÅ) (g‚ÇÇ : Z ‚ü∂ Y‚ÇÇ) ‚¶Éf‚ÇÅ : Y‚ÇÅ ‚ü∂ X‚¶Ñ ‚¶Éf‚ÇÇ : Y‚ÇÇ ‚ü∂ X‚¶Ñ
  (h‚ÇÅ : R f‚ÇÅ) (h‚ÇÇ : R f‚ÇÇ), g‚ÇÅ ‚â´ f‚ÇÅ = g‚ÇÇ ‚â´ f‚ÇÇ ‚Üí P.map g‚ÇÅ.op (x f‚ÇÅ h‚ÇÅ) = P.map g‚ÇÇ.op (x f‚ÇÇ h‚ÇÇ)

/--
If the category `C` has pullbacks, this is an alternative condition for a family of elements to be
consistent: For any `f : Y ‚ü∂ X` and `g : Z ‚ü∂ X` in the presieve `R`, the restriction of the
given elements for `f` and `g` to the pullback agree.
This is equivalent to being consistent (provided `C` has pullbacks), shown in
`is_pullback_consistent_iff`.

This is the definition for a "matching" family given in [MM92], Chapter III, Section 4,
Equation (5). Viewing the type `family_of_elements` as the middle object of the fork in
https://stacks.math.columbia.edu/tag/00VM, this condition expresses that `pr‚ÇÄ* (x) = pr‚ÇÅ* (x)`,
using the notation defined there.
-/
def family_of_elements.pullback_consistent (x : family_of_elements P R) [has_pullbacks C] : Prop :=
‚àÄ ‚¶ÉY‚ÇÅ Y‚ÇÇ‚¶Ñ ‚¶Éf‚ÇÅ : Y‚ÇÅ ‚ü∂ X‚¶Ñ ‚¶Éf‚ÇÇ : Y‚ÇÇ ‚ü∂ X‚¶Ñ (h‚ÇÅ : R f‚ÇÅ) (h‚ÇÇ : R f‚ÇÇ),
  P.map (pullback.fst : pullback f‚ÇÅ f‚ÇÇ ‚ü∂ _).op (x f‚ÇÅ h‚ÇÅ) = P.map pullback.snd.op (x f‚ÇÇ h‚ÇÇ)

lemma is_pullback_consistent_iff (x : family_of_elements P R) [has_pullbacks C] :
  x.consistent ‚Üî x.pullback_consistent :=
begin
  split,
  { intros t Y‚ÇÅ Y‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ,
    apply t,
    apply pullback.condition },
  { intros t Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ comm,
    rw [‚Üêpullback.lift_fst _ _ comm, op_comp, functor_to_types.map_comp_apply, t hf‚ÇÅ hf‚ÇÇ,
        ‚Üêfunctor_to_types.map_comp_apply, ‚Üêop_comp, pullback.lift_snd] }
end

/-- The restriction of a consistent family is consistent. -/
lemma family_of_elements.consistent.restrict {R‚ÇÅ R‚ÇÇ : presieve X} (h : R‚ÇÅ ‚â§ R‚ÇÇ)
  {x : family_of_elements P R‚ÇÇ} : x.consistent ‚Üí (x.restrict h).consistent :=
Œª q Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ comm, q g‚ÇÅ g‚ÇÇ (h _ h‚ÇÅ) (h _ h‚ÇÇ) comm

/--
Extend a family of elements to the sieve generated by an arrow set.
This is the construction described as "easy" in Lemma C2.1.3 of [Elephant].
-/
noncomputable def family_of_elements.sieve_extend (x : family_of_elements P R) :
  family_of_elements P (generate R) :=
Œª Z f hf, P.map (some (some_spec hf)).op (x _ (some_spec (some_spec (some_spec hf))).1)

/-- The extension of a consistent family to the generated sieve is consistent. -/
lemma family_of_elements.consistent.sieve_extend (x : family_of_elements P R) (hx : x.consistent) :
  x.sieve_extend.consistent :=
begin
  intros Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ comm,
  rw [‚Üê(some_spec (some_spec (some_spec h‚ÇÅ))).2, ‚Üê(some_spec (some_spec (some_spec h‚ÇÇ))).2,
      ‚Üêassoc, ‚Üêassoc] at comm,
  dsimp [family_of_elements.sieve_extend],
  rw [‚Üê functor_to_types.map_comp_apply, ‚Üê functor_to_types.map_comp_apply],
  apply hx _ _ _ _ comm,
end

/-- The extension of a family agrees with the original family. -/
lemma extend_agrees {x : family_of_elements P R} (t : x.consistent) {f : Y ‚ü∂ X} (hf : R f) :
  x.sieve_extend f ‚ü®_, ùüô _, f, hf, id_comp _‚ü© = x f hf :=
begin
  have h : (generate R) f := ‚ü®_, _, _, hf, id_comp _‚ü©,
  change P.map (some (some_spec h)).op (x _ _) = x f hf,
  rw t (some (some_spec h)) (ùüô _) _ hf _,
  { simp },
  simp_rw [id_comp],
  apply (some_spec (some_spec (some_spec h))).2,
end

/-- The restriction of an extension is the original. -/
@[simp]
lemma restrict_extend {x : family_of_elements P R} (t : x.consistent) :
  x.sieve_extend.restrict (le_generate R) = x :=
begin
  ext Y f hf,
  exact extend_agrees t hf,
end

/--
If the arrow set for a family of elements is actually a sieve (i.e. it is downward closed) then the
consistency condition can be simplified.
This is an equivalent condition, see `is_sieve_consistent_iff`.

This is the notion of "matching" given for families on sieves given in [MM92], Chapter III,
Section 4, Equation 1, and nlab: https://ncatlab.org/nlab/show/matching+family.
See also the discussion before Lemma C2.1.4 of [Elephant].
-/
def family_of_elements.sieve_consistent (x : family_of_elements P S) : Prop :=
‚àÄ ‚¶ÉY Z‚¶Ñ (f : Y ‚ü∂ X) (g : Z ‚ü∂ Y) (hf), x (g ‚â´ f) (S.downward_closed hf g) = P.map g.op (x f hf)

lemma is_sieve_consistent_iff (x : family_of_elements P S) :
  x.consistent ‚Üî x.sieve_consistent :=
begin
  split,
  { intros h Y Z f g hf,
    simpa using h (ùüô _) g (S.downward_closed hf g) hf (id_comp _) },
  { intros h Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ k,
    simp_rw [‚Üê h f‚ÇÅ g‚ÇÅ h‚ÇÅ, k, h f‚ÇÇ g‚ÇÇ h‚ÇÇ] }
end

lemma family_of_elements.consistent.to_sieve_consistent {x : family_of_elements P S}
  (t : x.consistent) : x.sieve_consistent :=
(is_sieve_consistent_iff x).1 t

lemma restrict_inj {x‚ÇÅ x‚ÇÇ : family_of_elements P (generate R)}
  (t‚ÇÅ : x‚ÇÅ.consistent) (t‚ÇÇ : x‚ÇÇ.consistent) :
  x‚ÇÅ.restrict (le_generate R) = x‚ÇÇ.restrict (le_generate R) ‚Üí x‚ÇÅ = x‚ÇÇ :=
begin
  intro h,
  ext Z f ‚ü®Y, f, g, hg, rfl‚ü©,
  rw is_sieve_consistent_iff at t‚ÇÅ t‚ÇÇ,
  erw [t‚ÇÅ g f ‚ü®_, _, g, hg, id_comp _‚ü©, t‚ÇÇ g f ‚ü®_, _, g, hg, id_comp _‚ü©],
  congr' 1,
  apply congr_fun (congr_fun (congr_fun h _) g) hg,
end

@[simp]
lemma extend_restrict {x : family_of_elements P (generate R)} (t : x.consistent) :
  (x.restrict (le_generate R)).sieve_extend = x :=
begin
  apply restrict_inj,
  { exact (t.restrict (le_generate R)).sieve_extend _ },
  { exact t },
  rw restrict_extend,
  exact t.restrict (le_generate R),
end

/--
The given element `t` of `P.obj (op X)` is an amalgamation for the family of elements `x` if every
restriction `P.map f.op t = x_f` for every arrow `f` in the presieve `R`.

This is the definition given in  https://ncatlab.org/nlab/show/sheaf#GeneralDefinitionInComponents,
and https://ncatlab.org/nlab/show/matching+family, as well as [MM92], Chapter III, Section 4,
equation (2).
-/
def is_amalgamation_for (x : family_of_elements P R)
  (t : P.obj (op X)) : Prop :=
‚àÄ ‚¶ÉY : C‚¶Ñ (f : Y ‚ü∂ X) (h : R f), P.map f.op t = x f h

lemma is_consistent_of_exists_amalgamation (x : family_of_elements P R)
  (h : ‚àÉ t, is_amalgamation_for x t) : x.consistent :=
begin
  cases h with t ht,
  intros Y‚ÇÅ Y‚ÇÇ Z g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ h‚ÇÅ h‚ÇÇ comm,
  rw [‚Üêht _ h‚ÇÅ, ‚Üêht _ h‚ÇÇ, ‚Üêfunctor_to_types.map_comp_apply, ‚Üêop_comp, comm],
  simp,
end

lemma is_amalgamation_for_restrict {R‚ÇÅ R‚ÇÇ : presieve X} (h : R‚ÇÅ ‚â§ R‚ÇÇ)
  (x : family_of_elements P R‚ÇÇ) (t : P.obj (op X)) (ht : is_amalgamation_for x t) :
  is_amalgamation_for (x.restrict h) t :=
Œª Y f hf, ht f (h Y hf)

lemma is_amalgamation_for_extend {R : presieve X}
  (x : family_of_elements P R) (t : P.obj (op X)) (ht : is_amalgamation_for x t) :
  is_amalgamation_for x.sieve_extend t :=
begin
  intros Y f hf,
  dsimp [family_of_elements.sieve_extend],
  rw [‚Üêht _, ‚Üêfunctor_to_types.map_comp_apply, ‚Üêop_comp, (some_spec (some_spec (some_spec hf))).2],
end

/-- A presheaf is separated for a presieve if there is at most one amalgamation. -/
def is_separated_for (P : C·µí·µñ ‚•§ Type v) (R : presieve X) : Prop :=
‚àÄ (x : family_of_elements P R) (t‚ÇÅ t‚ÇÇ),
  is_amalgamation_for x t‚ÇÅ ‚Üí is_amalgamation_for x t‚ÇÇ ‚Üí t‚ÇÅ = t‚ÇÇ

lemma is_separated_for.ext {R : presieve X} (hR : is_separated_for P R)
  {t‚ÇÅ t‚ÇÇ : P.obj (op X)} (h : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ (hf : R f), P.map f.op t‚ÇÅ = P.map f.op t‚ÇÇ) :
t‚ÇÅ = t‚ÇÇ :=
hR (Œª Y f hf, P.map f.op t‚ÇÇ) t‚ÇÅ t‚ÇÇ (Œª Y f hf, h hf) (Œª Y f hf, rfl)

lemma is_separated_for_iff_generate :
  is_separated_for P R ‚Üî is_separated_for P (generate R) :=
begin
  split,
  { intros h x t‚ÇÅ t‚ÇÇ ht‚ÇÅ ht‚ÇÇ,
    apply h (x.restrict (le_generate R)) t‚ÇÅ t‚ÇÇ _ _,
    { exact is_amalgamation_for_restrict _ x t‚ÇÅ ht‚ÇÅ },
    { exact is_amalgamation_for_restrict _ x t‚ÇÇ ht‚ÇÇ } },
  { intros h x t‚ÇÅ t‚ÇÇ ht‚ÇÅ ht‚ÇÇ,
    apply h (x.sieve_extend),
    { exact is_amalgamation_for_extend x t‚ÇÅ ht‚ÇÅ },
    { exact is_amalgamation_for_extend x t‚ÇÇ ht‚ÇÇ } }
end

lemma is_separated_for_top (P : C·µí·µñ ‚•§ Type v) : is_separated_for P (‚ä§ : presieve X) :=
Œª x t‚ÇÅ t‚ÇÇ h‚ÇÅ h‚ÇÇ,
begin
  have q‚ÇÅ := h‚ÇÅ (ùüô X) (by simp),
  have q‚ÇÇ := h‚ÇÇ (ùüô X) (by simp),
  simp only [op_id, functor_to_types.map_id_apply] at q‚ÇÅ q‚ÇÇ,
  rw [q‚ÇÅ, q‚ÇÇ],
end

/--
We define `P` to be a sheaf for the presieve `R` if every consistent family has a unique
amalgamation.

This is the definition of a sheaf for the given presieve given in C2.1.2 of [Elephant], and
https://ncatlab.org/nlab/show/sheaf#GeneralDefinitionInComponents. Using `is_sieve_consistent_iff`,
this is equivalent to the definition of a sheaf in [MM92], Chapter III, Section 4.
-/
def is_sheaf_for (P : C·µí·µñ ‚•§ Type v) (R : presieve X) : Prop :=
‚àÄ (x : family_of_elements P R), x.consistent ‚Üí ‚àÉ! t, is_amalgamation_for x t

/--
This is an equivalent condition to be a sheaf, which is useful for the abstraction to local
operators on elementary toposes. However this definition is defined only for sieves, not presieves.
The equivalence between this and `is_sheaf_for` is given in `yoneda_condition_iff_sheaf_condition`.

See the discussion before Equation (3) of [MM92], Chapter III, Section 4. See also C2.1.4 of
[Elephant]. This is also a direct reformulation of https://stacks.math.columbia.edu/tag/00Z8.
-/
def yoneda_sheaf_condition (P : C·µí·µñ ‚•§ Type v) (S : sieve X) : Prop :=
‚àÄ (f : S.functor ‚ü∂ P), ‚àÉ! g, S.functor_inclusion ‚â´ g = f

/--
(Implementation). This is a (primarily internal) equivalence between natural transformations
and consistent families.

Cf the discussion after Lemma 7.47.10 in https://stacks.math.columbia.edu/tag/00YW. See also
the proof of C2.1.4 of [Elephant], and the discussion in [MM92], Chapter III, Section 4.
-/
def nat_trans_equiv_consistent_family :
  (S.functor ‚ü∂ P) ‚âÉ {x : family_of_elements P S // x.consistent} :=
{ to_fun := Œª Œ±,
  begin
    refine ‚ü®Œª Y f hf, _, _‚ü©,
    { apply Œ±.app (op Y) ‚ü®_, hf‚ü© },
    { rw is_sieve_consistent_iff,
      intros Y Z f g hf,
      dsimp,
      rw ‚Üê functor_to_types.naturality _ _ Œ± g.op,
      refl }
  end,
  inv_fun := Œª t,
  { app := Œª Y f, t.1 _ f.2,
    naturality' := Œª Y Z g,
    begin
      ext ‚ü®f, hf‚ü©,
      apply t.2.to_sieve_consistent _,
    end },
  left_inv := Œª Œ±,
  begin
    ext X ‚ü®_, _‚ü©,
    refl
  end,
  right_inv :=
  begin
    rintro ‚ü®x, hx‚ü©,
    refl,
  end }

-- TODO: MOVE ME BEFORE PR
/--
We have a type-level equivalence between natural transformations from the yoneda embedding
and elements of `F.obj X`, without any universe switching.
-/
def yoneda_equiv {F : C·µí·µñ ‚•§ Type v} : (yoneda.obj X ‚ü∂ F) ‚âÉ F.obj (op X) :=
(yoneda_sections X F).to_equiv.trans equiv.ulift

/-- (Implementation). A lemma useful to prove `yoneda_condition_iff_sheaf_condition`. -/
lemma extension_iff_amalgamation (x : S.functor ‚ü∂ P) (g : yoneda.obj X ‚ü∂ P) :
  S.functor_inclusion ‚â´ g = x ‚Üî is_amalgamation_for (nat_trans_equiv_consistent_family x).1 (yoneda_equiv g) :=
begin
  dsimp [is_amalgamation_for, yoneda_equiv, yoneda_lemma, nat_trans_equiv_consistent_family],
  split,
  { rintro rfl,
    intros Y f hf,
    rw ‚Üê functor_to_types.naturality _ _ g,
    change g.app (op Y) (f ‚â´ ùüô X) = g.app (op Y) f,
    simp only [comp_id] },
  { intro h,
    ext Y ‚ü®f, hf‚ü©,
    have : _ = x.app Y _ := h f hf,
    rw [‚Üê this, ‚Üê functor_to_types.naturality _ _ g],
    dsimp,
    simp },
end

-- TODO: MOVE ME BEFORE PR
lemma equiv.exists_unique_congr {Œ± Œ≤ : Type*} (p : Œ≤ ‚Üí Prop) (e : Œ± ‚âÉ Œ≤) :
  (‚àÉ! (y : Œ≤), p y) ‚Üî ‚àÉ! (x : Œ±), p (e x) :=
begin
  split,
  { rintro ‚ü®b, hb‚ÇÅ, hb‚ÇÇ‚ü©,
    exact ‚ü®e.symm b, by simpa using hb‚ÇÅ, Œª x hx, by simp [‚Üêhb‚ÇÇ (e x) hx]‚ü© },
  { rintro ‚ü®a, ha‚ÇÅ, ha‚ÇÇ‚ü©,
    refine ‚ü®e a, ha‚ÇÅ, Œª y hy, _‚ü©,
    rw ‚Üê equiv.symm_apply_eq,
    apply ha‚ÇÇ,
    simpa using hy },
end

lemma yoneda_condition_iff_sheaf_condition :
  is_sheaf_for P S ‚Üî yoneda_sheaf_condition P S :=
begin
  rw [is_sheaf_for, yoneda_sheaf_condition],
  simp_rw [extension_iff_amalgamation],
  rw equiv.forall_congr_left' nat_trans_equiv_consistent_family,
  rw subtype.forall,
  apply ball_congr,
  intros x hx,
  rw ‚Üê equiv.exists_unique_congr _ _,
  simp,
end

lemma separated_for_and_exists_amalgamation_iff_sheaf_for :
  is_separated_for P R ‚àß (‚àÄ (x : family_of_elements P R), x.consistent ‚Üí ‚àÉ t, is_amalgamation_for x t) ‚Üî is_sheaf_for P R :=
begin
  rw [is_separated_for, ‚Üêforall_and_distrib],
  apply forall_congr,
  intro x,
  split,
  { intros z hx, exact exists_unique_of_exists_of_unique (z.2 hx) z.1 },
  { intros h,
    refine ‚ü®_, (exists_of_exists_unique ‚àò h)‚ü©,
    intros t‚ÇÅ t‚ÇÇ ht‚ÇÅ ht‚ÇÇ,
    apply (h _).unique ht‚ÇÅ ht‚ÇÇ,
    exact is_consistent_of_exists_amalgamation x ‚ü®_, ht‚ÇÇ‚ü© }
end

lemma is_separated_for.is_sheaf_for (t : is_separated_for P R) :
  (‚àÄ (x : family_of_elements P R), x.consistent ‚Üí ‚àÉ t, is_amalgamation_for x t) ‚Üí
  is_sheaf_for P R :=
begin
  rw ‚Üê separated_for_and_exists_amalgamation_iff_sheaf_for,
  apply and.intro t,
end

/-- Get the amalgamation of the given consistent family, provided we have a sheaf. -/
noncomputable def is_sheaf_for.amalgamate
  (t : is_sheaf_for P R) (x : family_of_elements P R) (hx : x.consistent) :
  P.obj (op X) :=
classical.some (t x hx).exists

lemma is_sheaf_for.is_amalgamation_for
  (t : is_sheaf_for P R) {x : family_of_elements P R} (hx : x.consistent) :
  is_amalgamation_for x (t.amalgamate x hx) :=
classical.some_spec (t x hx).exists

@[simp]
lemma is_sheaf_for.valid_glue
  (t : is_sheaf_for P R) {x : family_of_elements P R} (hx : x.consistent) (f : Y ‚ü∂ X) (Hf : R f) :
  P.map f.op (t.amalgamate x hx) = x f Hf :=
t.is_amalgamation_for hx f Hf

/-- If `P` is a sheaf for `R`, it is separated for `R`. -/
lemma is_sheaf_for.is_separated_for : is_sheaf_for P R ‚Üí is_separated_for P R :=
Œª q, (separated_for_and_exists_amalgamation_iff_sheaf_for.2 q).1

/-- C2.1.3 in Elephant -/
lemma is_sheaf_for_iff_generate :
  is_sheaf_for P R ‚Üî is_sheaf_for P (generate R) :=
begin
  rw ‚Üê separated_for_and_exists_amalgamation_iff_sheaf_for,
  rw ‚Üê separated_for_and_exists_amalgamation_iff_sheaf_for,
  rw ‚Üê is_separated_for_iff_generate,
  apply and_congr (iff.refl _),
  split,
  { intros q x hx,
    apply exists_imp_exists _ (q _ (hx.restrict (le_generate R))),
    intros t ht,
    simpa [hx] using is_amalgamation_for_extend _ _ ht },
  { intros q x hx,
    apply exists_imp_exists _ (q _ (hx.sieve_extend _)),
    intros t ht,
    simpa [hx] using is_amalgamation_for_restrict (le_generate R) _ _ ht },
end

/--
Every presheaf is a sheaf for the family {ùüô X}.

Elephant: C2.1.5(i)
-/
lemma is_sheaf_for_singleton_iso (P : C·µí·µñ ‚•§ Type v) :
  is_sheaf_for P (presieve.singleton (ùüô X)) :=
begin
  intros x hx,
  refine ‚ü®x _ (presieve.singleton_self _), _, _‚ü©,
  { rintro _ _ ‚ü®rfl, rfl‚ü©,
    simp },
  { intros t ht,
    simpa using ht _ (presieve.singleton_self _) }
end

/--
Every presheaf is a sheaf for the maximal sieve.

Elephant: C2.1.5(ii)
-/
lemma is_sheaf_for_top_sieve (P : C·µí·µñ ‚•§ Type v) :
  is_sheaf_for P ((‚ä§ : sieve X) : presieve X) :=
begin
  rw ‚Üê generate_of_singleton_split_epi (ùüô X),
  rw ‚Üê is_sheaf_for_iff_generate,
  apply is_sheaf_for_singleton_iso,
end

/--
If `P` is a sheaf for `S`, and it is iso to `P'`, then `P'` is a sheaf for `S`. This shows that
"being a sheaf for a presieve" is a mathematical or hygenic property.
-/
lemma is_sheaf_for_iso {P' : C·µí·µñ ‚•§ Type v} (i : P ‚âÖ P') : is_sheaf_for P R ‚Üí is_sheaf_for P' R :=
begin
  rw [is_sheaf_for_iff_generate, yoneda_condition_iff_sheaf_condition, is_sheaf_for_iff_generate,
      yoneda_condition_iff_sheaf_condition],
  intros h f,
  obtain ‚ü®g, hg‚ÇÅ, hg‚ÇÇ‚ü© := h (f ‚â´ i.inv),
  refine ‚ü®g ‚â´ i.hom, by simpa [iso.eq_comp_inv] using hg‚ÇÅ, _‚ü©,
  { intros g' hg',
    rw ‚Üê iso.comp_inv_eq,
    apply hg‚ÇÇ,
    rw reassoc_of hg' },
end

/--
If a family of arrows `R` on `X` has a subsieve `S` such that:

* `P` is a sheaf for `S`.
* For every `f` in `R`, `P` is separated for the pullback of `S` along `f`,

then `P` is a sheaf for `R`.
-/
lemma is_sheaf_for_subsieve_aux (P : C·µí·µñ ‚•§ Type v) {S : sieve X} {R : presieve X}
  (h : (S : presieve X) ‚â§ R)
  (hS : is_sheaf_for P S)
  (trans : ‚àÄ ‚¶ÉY‚¶Ñ ‚¶Éf : Y ‚ü∂ X‚¶Ñ, R f ‚Üí is_separated_for P (S.pullback f)) :
  is_sheaf_for P R :=
begin
  rw ‚Üê separated_for_and_exists_amalgamation_iff_sheaf_for,
  refine ‚ü®_, _‚ü©,
  { intros x t‚ÇÅ t‚ÇÇ ht‚ÇÅ ht‚ÇÇ,
    exact hS.is_separated_for _ _ _ (is_amalgamation_for_restrict h x t‚ÇÅ ht‚ÇÅ)
                                    (is_amalgamation_for_restrict h x t‚ÇÇ ht‚ÇÇ) },
  { intros x hx,
    use hS.amalgamate _ (hx.restrict h),
    intros W j hj,
    apply (trans hj).ext,
    intros Y f hf,
    rw [‚Üêfunctor_to_types.map_comp_apply, ‚Üêop_comp,
        hS.valid_glue (hx.restrict h) _ hf, family_of_elements.restrict,
        ‚Üêhx (ùüô _) f _ _ (id_comp _)],
    simp },
end

/--
If `P` is a sheaf for every pullback of the sieve `S`, then `P` is a sheaf for any presieve which
contains `S`.
-/
lemma is_sheaf_for_subsieve (P : C·µí·µñ ‚•§ Type v) {S : sieve X} {R : presieve X}
  (h : (S : presieve X) ‚â§ R)
  (trans : Œ† ‚¶ÉY‚¶Ñ (f : Y ‚ü∂ X), is_sheaf_for P (S.pullback f)) :
  is_sheaf_for P R :=
is_sheaf_for_subsieve_aux P h (by simpa using trans (ùüô _)) (Œª Y f hf, (trans f).is_separated_for)

/-- A presheaf is separated for a topology if it is separated for every sieve in the topology. -/
def is_separated (P : C·µí·µñ ‚•§ Type v) : Prop :=
‚àÄ {X} (S : sieve X), S ‚àà J X ‚Üí is_separated_for P S

/--
A presheaf is a sheaf for a topology if it is a sheaf for every sieve in the topology.

If the given topology is given by a pretopology, `is_sheaf_for_pretopology` shows it suffices to
check the sheaf condition at presieves in the pretopology.
-/
def is_sheaf (P : C·µí·µñ ‚•§ Type v) : Prop :=
‚àÄ {X} (S : sieve X), S ‚àà J X ‚Üí is_sheaf_for P S

lemma is_sheaf_for_coarser_topology (P : C·µí·µñ ‚•§ Type v) {J‚ÇÅ J‚ÇÇ : grothendieck_topology C} :
  J‚ÇÅ ‚â§ J‚ÇÇ ‚Üí is_sheaf J‚ÇÇ P ‚Üí is_sheaf J‚ÇÅ P :=
Œª h t X S hS, t S (h _ hS)

lemma separated_of_sheaf (P : C·µí·µñ ‚•§ Type v) (h : is_sheaf J P) : is_separated J P :=
Œª X S hS, (h S hS).is_separated_for

/-- The property of being a sheaf is preserved by isomorphism. -/
lemma is_sheaf_iso {P' : C·µí·µñ ‚•§ Type v} (i : P ‚âÖ P') (h : is_sheaf J P) : is_sheaf J P' :=
Œª X S hS, is_sheaf_for_iso i (h S hS)

lemma is_sheaf_yoneda (h : ‚àÄ {X} (S : sieve X), S ‚àà J X ‚Üí yoneda_sheaf_condition P S) :
  is_sheaf J P :=
begin
  intros X S hS,
  rw yoneda_condition_iff_sheaf_condition,
  apply h _ hS,
end

/--
For a topology generated by a basis, it suffices to check the sheaf condition on the basis
presieves only.
-/
lemma is_sheaf_for_pretopology [has_pullbacks C] (K : pretopology C) :
  is_sheaf (K.to_grothendieck C) P ‚Üî (‚àÄ {X : C} (R : presieve X), R ‚àà K X ‚Üí is_sheaf_for P R) :=
begin
  split,
  { intros PJ X R hR,
    rw is_sheaf_for_iff_generate,
    apply PJ (sieve.generate R) ‚ü®_, hR, le_generate R‚ü© },
  { rintro PK X S ‚ü®R, hR, RS‚ü©,
    have gRS : ‚áë(generate R) ‚â§ S,
    { apply gi_generate.gc.monotone_u,
      rwa sets_iff_generate },
    apply is_sheaf_for_subsieve P gRS _,
    intros Y f,
    rw [‚Üê pullback_arrows_comm, ‚Üê is_sheaf_for_iff_generate],
    exact PK (pullback_arrows f R) (K.pullbacks f R hR) }
end

end presieve

-- TODO: move me before PR
lemma type_equalizer {X Y Z : Type v} (f : X ‚ü∂ Y) (g h : Y ‚ü∂ Z) (w : f ‚â´ g = f ‚â´ h) :
  (‚àÄ (y : Y), g y = h y ‚Üí ‚àÉ! (x : X), f x = y) ‚Üî nonempty (is_limit (fork.of_Œπ _ w)) :=
begin
  split,
  { intro t,
    apply nonempty.intro,
    apply fork.is_limit.mk',
    intro s,
    refine ‚ü®Œª i, _, _, _‚ü©,
    { apply classical.some (t (s.Œπ i) _),
      apply congr_fun s.condition i },
    { ext i,
      apply (classical.some_spec (t (s.Œπ i) _)).1 },
    { intros m hm,
      ext i,
      apply (classical.some_spec (t (s.Œπ i) _)).2,
      apply congr_fun hm i } },
  { rintro ‚ü®t‚ü© y hy,
    let y' : punit ‚ü∂ Y := Œª _, y,
    have hy' : y' ‚â´ g = y' ‚â´ h := funext (Œª _, hy),
    refine ‚ü®(fork.is_limit.lift' t _ hy').1 ‚ü®‚ü©, congr_fun (fork.is_limit.lift' t y' _).2 ‚ü®‚ü©, _‚ü©,
    intros x' hx',
    suffices : (Œª (_ : punit), x') = (fork.is_limit.lift' t y' hy').1,
      rw ‚Üê this,
    apply fork.is_limit.hom_ext t,
    ext ‚ü®‚ü©,
    apply hx'.trans (congr_fun (fork.is_limit.lift' t _ hy').2 ‚ü®‚ü©).symm },
end

namespace equalizer

variables {C : Type v} [small_category C] {X : C} (R : presieve X) (S : sieve X) (P : C·µí·µñ ‚•§ Type v)

noncomputable theory

/--
The middle object of the fork diagram given in Equation (3) of [MM92], Chapter III, Section 4, as
well as the fork diagram of https://stacks.math.columbia.edu/tag/00VM.
-/
def first_obj : Type v :=
‚àè (Œª (f : Œ£ Y, {f : Y ‚ü∂ X // R f}), P.obj (op f.1))

/-- Show that `first_obj` is isomorphic to `family_of_elements`. -/
@[simps]
def first_obj_eq_family : first_obj R P ‚âÖ R.family_of_elements P :=
{ hom := Œª t Y f hf, pi.œÄ (Œª (f : Œ£ Y, {f : Y ‚ü∂ X // R f}), P.obj (op f.1)) ‚ü®_, _, hf‚ü© t,
  inv := pi.lift (Œª f x, x _ f.2.2),
  hom_inv_id' :=
  begin
    ext ‚ü®Y, f, hf‚ü© p,
    simpa,
  end,
  inv_hom_id' :=
  begin
    ext x Y f hf,
    apply limits.types.limit.lift_œÄ_apply,
  end }

def fork_map : P.obj (op X) ‚ü∂ first_obj R P :=
pi.lift (Œª f, P.map f.2.1.op)

namespace sieve

def second_obj : Type v :=
‚àè (Œª (f : Œ£ Y Z (g : Z ‚ü∂ Y), {f' : Y ‚ü∂ X // S f'}), P.obj (op f.2.1))

def first_map : first_obj S P ‚ü∂ second_obj S P :=
pi.lift (Œª fg, pi.œÄ _ (‚ü®_, _, S.downward_closed fg.2.2.2.2 fg.2.2.1‚ü© : Œ£ Y, {f : Y ‚ü∂ X // S f}))

def second_map : first_obj S P ‚ü∂ second_obj S P :=
pi.lift (Œª fg, pi.œÄ _ ‚ü®_, fg.2.2.2‚ü© ‚â´ P.map fg.2.2.1.op)

lemma w : fork_map S P ‚â´ first_map S P = fork_map S P ‚â´ second_map S P :=
begin
  apply limit.hom_ext,
  rintro ‚ü®Y, Z, g, f, hf‚ü©,
  simp [first_map, second_map, fork_map],
end

lemma consistent_iff (x : first_obj S P) :
  ((first_obj_eq_family S P).hom x).consistent ‚Üî first_map S P x = second_map S P x :=
begin
  rw presieve.is_sieve_consistent_iff,
  split,
  { intro t,
    ext ‚ü®Y, Z, g, f, hf‚ü©,
    simpa [first_map, second_map] using t _ g hf },
  { intros t Y Z f g hf,
    have : (first_map S P ‚â´ pi.œÄ _ (‚ü®Y, Z, g, f, hf‚ü© : Œ£ (Y Z : C) (g : Z ‚ü∂ Y), {f' // S f'})) x =
           (second_map S P ‚â´ pi.œÄ _ (‚ü®Y, Z, g, f, hf‚ü© : Œ£ (Y Z : C) (g : Z ‚ü∂ Y), {f' // S f'})) x,
    { dsimp, rw t },
    simpa [first_map, second_map] using this }
end

lemma equalizer_sheaf_condition :
  presieve.is_sheaf_for P S ‚Üî nonempty (is_limit (fork.of_Œπ _ (w S P))) :=
begin
  rw [‚Üê type_equalizer, ‚Üê equiv.forall_congr_left (first_obj_eq_family S P).to_equiv.symm],
  simp_rw ‚Üê consistent_iff,
  simp only [inv_hom_id_apply, iso.to_equiv_symm_fun],
  apply ball_congr,
  intros x tx,
  apply exists_unique_congr,
  intro t,
  rw ‚Üê iso.to_equiv_symm_fun,
  rw equiv.eq_symm_apply,
  split,
  { intros q,
    ext Y f hf,
    simpa [first_obj_eq_family, fork_map] using q _ _ },
  { intros q Y f hf,
    rw ‚Üê q,
    simp [first_obj_eq_family, fork_map] }
end

end sieve

namespace presieve

variables [has_pullbacks C]

def second_obj : Type v :=
‚àè (Œª (fg : (Œ£ Y, {f : Y ‚ü∂ X // R f}) √ó (Œ£ Z, {g : Z ‚ü∂ X // R g})),
  P.obj (op (pullback fg.1.2.1 fg.2.2.1)))

def first_map : first_obj R P ‚ü∂ second_obj R P :=
pi.lift (Œª fg, pi.œÄ _ _ ‚â´ P.map pullback.fst.op)

def second_map : first_obj R P ‚ü∂ second_obj R P :=
pi.lift (Œª fg, pi.œÄ _ _ ‚â´ P.map pullback.snd.op)

lemma w : fork_map R P ‚â´ first_map R P = fork_map R P ‚â´ second_map R P :=
begin
  apply limit.hom_ext,
  rintro ‚ü®‚ü®Y, f, hf‚ü©, ‚ü®Z, g, hg‚ü©‚ü©,
  simp only [first_map, second_map, fork_map],
  simp only [limit.lift_œÄ, limit.lift_œÄ_assoc, assoc, fan.mk_œÄ_app, subtype.coe_mk,
             subtype.val_eq_coe],
  rw [‚Üê P.map_comp, ‚Üê op_comp, pullback.condition],
  simp,
end

lemma consistent_iff (x : first_obj R P) :
  ((first_obj_eq_family R P).hom x).consistent ‚Üî first_map R P x = second_map R P x :=
begin
  rw presieve.is_pullback_consistent_iff,
  split,
  { intro t,
    ext ‚ü®‚ü®Y, f, hf‚ü©, Z, g, hg‚ü©,
    simpa [first_map, second_map] using t hf hg },
  { intros t Y Z f g hf hg,
    have : (first_map R P ‚â´ pi.œÄ _ (‚ü®‚ü®Y, f, hf‚ü©, Z, g, hg‚ü© : (Œ£ Y, {f : Y ‚ü∂ X // R f}) √ó (Œ£ Z, {g : Z ‚ü∂ X // R g}))) x =
           (second_map R P ‚â´ pi.œÄ _ (‚ü®‚ü®Y, f, hf‚ü©, Z, g, hg‚ü© : (Œ£ Y, {f : Y ‚ü∂ X // R f}) √ó (Œ£ Z, {g : Z ‚ü∂ X // R g}))) x,
    { dsimp, rw t },
    simpa [first_map, second_map] using this }
end

lemma equalizer_sheaf_condition :
  R.is_sheaf_for P ‚Üî nonempty (is_limit (fork.of_Œπ _ (w R P))) :=
begin
  rw ‚Üê type_equalizer,
  erw ‚Üê equiv.forall_congr_left (first_obj_eq_family R P).to_equiv.symm,
  simp_rw [‚Üê consistent_iff, ‚Üê iso.to_equiv_fun, equiv.apply_symm_apply],
  apply ball_congr,
  intros x hx,
  apply exists_unique_congr,
  intros t,
  rw equiv.eq_symm_apply,
  split,
  { intros q,
    ext Y f hf,
    simpa [fork_map] using q _ _ },
  { intros q Y f hf,
    rw ‚Üê q,
    simp [fork_map] }
end

end presieve
end equalizer

#lint

-- variables (C J)

-- structure Sheaf :=
-- (P : C·µí·µñ ‚•§ Type v)
-- (sheaf_cond : sheaf_condition J P)

-- instance : category (Sheaf C J) := induced_category.category Sheaf.P

end category_theory
